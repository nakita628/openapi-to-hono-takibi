openapi: "3.0.3"
info:
  title: "2-Factor Authentication JWT API"
  version: "1.0.0"
  description: >
    This API supports two-factor authentication and issues JWT tokens for authenticated sessions.
    The authentication process involves:
      1. Submitting user credentials via the `/auth/login` endpoint.
      2. Receiving a temporary token if two-factor authentication (2FA) is required.
      3. Verifying the 2FA code along with the temporary token via the `/auth/verify` endpoint.
      4. Receiving a JWT token upon successful verification, which is used for accessing protected endpoints.
servers:
  - url: https://api.example.com/v1
paths:
  /auth/login:
    post:
      summary: "User Login"
      description: >
        Authenticate user credentials and initiate two-factor authentication if enabled.
      requestBody:
        description: "User credentials for login"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInput"
      responses:
        '200':
          description: >
            Login successful. If 2FA is enabled for the account, a temporary token is returned along with a flag indicating that 2FA verification is required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        '401':
          description: "Invalid credentials."
  /auth/verify:
    post:
      summary: "Verify Two-Factor Authentication Code"
      description: >
        Verify the 2FA code using the temporary token obtained from the login endpoint.
        Upon successful verification, a JWT token is issued.
      requestBody:
        description: "Temporary token and 2FA code for verification"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyInput"
      responses:
        '200':
          description: "2FA verified successfully; JWT token issued."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyResponse"
        '401':
          description: "Invalid or expired 2FA code."
  /profile:
    get:
      summary: "Get User Profile"
      description: "Retrieve the profile of the authenticated user."
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "User profile retrieved successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        '401':
          description: "Unauthorized â€“ invalid or missing JWT token."
components:
  schemas:
    LoginInput:
      type: object
      properties:
        username:
          type: string
          example: "user@example.com"
        password:
          type: string
          example: "P@ssw0rd!"
      required:
        - username
        - password
    LoginResponse:
      type: object
      properties:
        two_factor_required:
          type: boolean
          description: "Indicates if 2FA is required for the user."
          example: true
        temp_token:
          type: string
          description: >
            Temporary token to be used for 2FA verification.
            This field is provided only if `two_factor_required` is true.
          example: "temp1234567890"
        message:
          type: string
          example: "2FA required. Please verify using the code sent to your device."
      required:
        - two_factor_required
    VerifyInput:
      type: object
      properties:
        temp_token:
          type: string
          description: "Temporary token received from the login response."
          example: "temp1234567890"
        code:
          type: string
          description: "Two-factor authentication code."
          example: "123456"
      required:
        - temp_token
        - code
    VerifyResponse:
      type: object
      properties:
        token:
          type: string
          description: "JWT token issued upon successful 2FA verification."
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expires_in:
          type: integer
          description: "Token expiration time in seconds."
          example: 3600
      required:
        - token
        - expires_in
    Profile:
      type: object
      properties:
        id:
          type: string
          example: "user-123"
        username:
          type: string
          example: "user@example.com"
        fullName:
          type: string
          example: "John Doe"
      required:
        - id
        - username
        - fullName
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
