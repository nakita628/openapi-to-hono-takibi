openapi: "3.0.3"
info:
  title: "Amazon Marketplace API"
  version: "1.0.0"
  description: >
    This API provides endpoints for managing products, orders, and customers
    in an Amazon-like e-commerce system. It allows clients to search for products,
    retrieve product details, and manage orders. Authentication is handled via an API key.
servers:
  - url: https://api.amazon.com/v1
paths:
  /products:
    get:
      summary: "List Products"
      description: >
        Retrieve a list of products available in the marketplace.
        Supports filtering by category and search query.
      parameters:
        - name: category
          in: query
          description: Filter products by category.
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: Search query for product names or descriptions.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of products to return.
          required: false
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: Starting index for pagination.
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: A list of products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
  /products/{productId}:
    get:
      summary: "Get Product Details"
      description: Retrieve detailed information about a specific product.
      parameters:
        - name: productId
          in: path
          description: The unique identifier of the product.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        '404':
          description: Product not found.
    put:
      summary: "Update Product"
      description: >
        Update product information. This endpoint is intended for vendor use.
      parameters:
        - name: productId
          in: path
          description: The unique identifier of the product.
          required: true
          schema:
            type: string
      requestBody:
        description: Updated product information.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput"
      responses:
        '200':
          description: Product updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        '404':
          description: Product not found.
    delete:
      summary: "Delete Product"
      description: >
        Delete a product from the marketplace. This action is restricted to vendors.
      parameters:
        - name: productId
          in: path
          description: The unique identifier of the product.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product deleted successfully.
        '404':
          description: Product not found.
  /orders:
    get:
      summary: "List Orders"
      description: >
        Retrieve a list of orders for the authenticated customer.
      security:
        - apiKeyAuth: []
      parameters:
        - name: status
          in: query
          description: Filter orders by status (e.g., pending, shipped, delivered).
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of orders to return.
          required: false
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: Starting index for pagination.
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: A list of orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
    post:
      summary: "Create Order"
      description: Place a new order in the marketplace.
      security:
        - apiKeyAuth: []
      requestBody:
        description: Order details for the new order.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderInput"
      responses:
        '201':
          description: Order created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
  /orders/{orderId}:
    get:
      summary: "Get Order Details"
      description: Retrieve detailed information about a specific order.
      security:
        - apiKeyAuth: []
      parameters:
        - name: orderId
          in: path
          description: The unique identifier of the order.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        '404':
          description: Order not found.
    put:
      summary: "Update Order"
      description: >
        Update order status or details such as shipping information.
      security:
        - apiKeyAuth: []
      parameters:
        - name: orderId
          in: path
          description: The unique identifier of the order.
          required: true
          schema:
            type: string
      requestBody:
        description: Updated order information.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderUpdate"
      responses:
        '200':
          description: Order updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        '404':
          description: Order not found.
    delete:
      summary: "Cancel Order"
      description: Cancel an existing order.
      security:
        - apiKeyAuth: []
      parameters:
        - name: orderId
          in: path
          description: The unique identifier of the order.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Order canceled successfully.
        '404':
          description: Order not found.
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          example: "B00123456"
        name:
          type: string
          example: "Echo Dot (3rd Gen)"
        description:
          type: string
          example: "Smart speaker with Alexa."
        price:
          type: number
          format: float
          example: 49.99
        category:
          type: string
          example: "Electronics"
        availability:
          type: boolean
          description: "Indicates if the product is currently available."
          example: true
      required:
        - id
        - name
        - price
        - category
    ProductInput:
      type: object
      properties:
        name:
          type: string
          example: "Echo Dot (3rd Gen)"
        description:
          type: string
          example: "Smart speaker with Alexa."
        price:
          type: number
          format: float
          example: 49.99
        category:
          type: string
          example: "Electronics"
        availability:
          type: boolean
          description: "Indicates if the product is available."
          example: true
      required:
        - name
        - price
        - category
    Order:
      type: object
      properties:
        id:
          type: string
          example: "ORDER123456"
        customerId:
          type: string
          example: "CUST78910"
        orderDate:
          type: string
          format: date-time
          example: "2025-01-15T10:30:00Z"
        products:
          type: array
          description: List of products in the order.
          items:
            type: object
            properties:
              productId:
                type: string
                example: "B00123456"
              quantity:
                type: integer
                example: 2
            required:
              - productId
              - quantity
        totalAmount:
          type: number
          format: float
          example: 99.98
        status:
          type: string
          description: "Current order status (e.g., pending, shipped, delivered, canceled)."
          example: "pending"
      required:
        - id
        - customerId
        - orderDate
        - products
        - totalAmount
        - status
    OrderInput:
      type: object
      properties:
        customerId:
          type: string
          example: "CUST78910"
        products:
          type: array
          description: List of products to order.
          items:
            type: object
            properties:
              productId:
                type: string
                example: "B00123456"
              quantity:
                type: integer
                example: 2
            required:
              - productId
              - quantity
      required:
        - customerId
        - products
    OrderUpdate:
      type: object
      properties:
        status:
          type: string
          description: >
            Updated order status (e.g., pending, shipped, delivered, canceled).
          example: "shipped"
      required:
        - status
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
security:
  - apiKeyAuth: []
